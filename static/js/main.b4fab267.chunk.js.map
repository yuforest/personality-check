{"version":3,"sources":["views/components/question/Question.tsx","data/questions.ts","views/pages/check/Check.tsx","views/pages/home/Home.tsx","data/personality_types.ts","views/pages/result/Result.tsx","views/components/layout/Header.tsx","views/components/layout/Footer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Question","question","setAnswers","answers","mt","fontWeight","id","content","onChange","value","newAnswers","colorScheme","defaultValue","size","spacing","direction","questions","type","Check","history","useHistory","maxStep","Math","ceil","length","steps","Array","map","_","i","label","results","name","score","calculatePersonalityType","result","find","undefined","parseInt","maxResult","useState","step","setStep","loading","setLoading","initialAnswers","styleConfig","completedBgColor","completedTextColor","activeBgColor","activeTextColor","inactiveBgColor","inactiveTextColor","labelFontSize","circleFontSize","borderRadius","activeStep","filter","start","end","justify","onClick","isDisabled","isLoading","loadingText","setTimeout","push","pathname","state","spinnerPlacement","Home","color","personalityTypes","optimist","description","rationalist","patient","dreamer","cautious","Result","props","useEffect","location","fontSize","className","Header","bg","p","to","Footer","w","Date","getFullYear","App","basename","process","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4fab267.chunk.js","sourcesContent":["import { Box, Radio, RadioGroup, Stack } from '@chakra-ui/react'\n\nconst Question = ({\n  question,\n  setAnswers,\n  answers,\n}: {\n  question: any\n  setAnswers: Function\n  answers: any\n}) => {\n  const setAnswer = (value: string) => {\n    const newAnswers = answers\n    newAnswers[question.id] = value\n    setAnswers(newAnswers)\n  }\n  return (\n    <Box mt=\"7\" key={question.id}>\n      <Box fontWeight=\"bold\">\n        {question.id}: {question.content}\n      </Box>\n      <RadioGroup\n        onChange={setAnswer}\n        colorScheme=\"green\"\n        defaultValue=\"3\"\n        mt=\"4\"\n        size=\"md\"\n      >\n        <Stack spacing={3} direction=\"column\">\n          <Radio value=\"1\">全くあてはまらない</Radio>\n          <Radio value=\"2\">あまりあてはまらない</Radio>\n          <Radio value=\"3\">どちらとも言えない</Radio>\n          <Radio value=\"4\">少しあてはまる</Radio>\n          <Radio value=\"5\">とてもあてはまる</Radio>\n        </Stack>\n      </RadioGroup>\n    </Box>\n  )\n}\n\nexport default Question\n","import QuestionType from 'types/question'\nconst questions: QuestionType[] = [\n  {\n    id: 1,\n    content: '最悪の事態はそう起きる物ではないと思う',\n    type: 'optimist',\n  },\n  {\n    id: 2,\n    content: '理に合わないことはできないタイプだ',\n    type: 'rationalist',\n  },\n  {\n    id: 3,\n    content: '下積みの時代も必要だと思う',\n    type: 'patient',\n  },\n  {\n    id: 4,\n    content: 'こうだったら世界はもっと良くなるのにと思うことがよくある',\n    type: 'dreamer',\n  },\n  {\n    id: 5,\n    content: '常に最悪の事態を想定して行動する',\n    type: 'cautious',\n  },\n  {\n    id: 6,\n    content: '警戒心が強いタイプだ',\n    type: 'cautious',\n  },\n  {\n    id: 7,\n    content: '人との付き合いでかなり損得勘定をしてしまうタイプだ',\n    type: 'rationalist',\n  },\n  {\n    id: 8,\n    content: '将来のために頑張れるタイプだ',\n    type: 'patient',\n  },\n  {\n    id: 9,\n    content: '自分が子供っぽいと思うことがある',\n    type: 'dreamer',\n  },\n  {\n    id: 10,\n    content: '将来のことでくよくよすることはそんなにない',\n    type: 'optimist',\n  },\n  {\n    id: 11,\n    content: '大きな夢を抱きそれを実現することに生きがいを感じる',\n    type: 'dreamer',\n  },\n  {\n    id: 12,\n    content: 'その場の感情で動くことはあまりない',\n    type: 'rationalist',\n  },\n  {\n    id: 13,\n    content: '自分は我慢強い方だと思う',\n    type: 'patient',\n  },\n  {\n    id: 14,\n    content: '石橋を叩いて行動するタイプだ',\n    type: 'cautious',\n  },\n  {\n    id: 15,\n    content: '日常生活の中で不安を感じることはそれほどない',\n    type: 'optimist',\n  },\n]\n\nexport default questions\n","import { Button, Center, Container, Flex } from '@chakra-ui/react'\nimport { useState } from 'react'\nimport { Stepper } from 'react-form-stepper'\nimport { useHistory } from 'react-router'\nimport Question from 'views/components/question/Question'\nimport QuestionType from 'types/question'\nimport Result from 'types/result'\nimport questions from 'data/questions'\n\nconst Check = () => {\n  const history = useHistory()\n  const questionPerStep = 5\n  const maxStep = Math.ceil(questions.length / questionPerStep)\n  const next = () => {\n    if (maxStep <= step) return\n    setStep(step + 1)\n  }\n  const back = () => {\n    if (1 >= step) return\n    setStep(step - 1)\n  }\n\n  const steps = [...Array(maxStep)].map((_, i) => {\n    return { label: `Step ${i + 1}` }\n  })\n\n  const canNext = () => {\n    if (maxStep <= step) return false\n    return true\n  }\n  const canBack = () => {\n    if (1 >= step) return false\n    return true\n  }\n  const isCurrentQuestion = (question: QuestionType) => {\n    const start = questionPerStep * (step - 1) + 1\n    const end = start + questionPerStep - 1\n    return question.id >= start && question.id <= end\n  }\n\n  const submit = () => {\n    setLoading(true)\n    setTimeout(\n      () =>\n        history.push({\n          pathname: '/result',\n          state: { type: calculatePersonalityType() },\n        }),\n      5000,\n    )\n  }\n\n  const results: Result[] = [\n    {\n      name: 'optimist',\n      score: 0,\n    },\n    {\n      name: 'rationalist',\n      score: 0,\n    },\n    {\n      name: 'patient',\n      score: 0,\n    },\n    {\n      name: 'dreamer',\n      score: 0,\n    },\n    {\n      name: 'cautious',\n      score: 0,\n    },\n  ]\n\n  const calculatePersonalityType = () => {\n    for (let i = 1; i <= questions.length; i++) {\n      const type: string = questions[i - 1].type\n      const result = results.find((result) => result.name === type)\n      if (result !== undefined) {\n        result.score += parseInt(answers[i])\n      }\n    }\n    let maxResult = results[0]\n    for (let i = 0; i < results.length; i++) {\n      if (maxResult.score < results[i].score) {\n        maxResult = results[i]\n      }\n    }\n    return maxResult.name\n  }\n  const [step, setStep] = useState(1)\n  const [loading, setLoading] = useState(false)\n\n  type Answers = {\n    [key: number]: string\n  }\n  let initialAnswers: Answers = {}\n  for (let i = 1; i <= questions.length; i++) {\n    initialAnswers[i] = '3'\n  }\n  const [answers, setAnswers] = useState(initialAnswers)\n\n  const styleConfig = {\n    completedBgColor: '#005731',\n    completedTextColor: '#ffffff',\n    activeBgColor: '#6bd391',\n    activeTextColor: '#ffffff',\n    inactiveBgColor: '#e0e0e0',\n    inactiveTextColor: '#ffffff',\n    labelFontSize: '0.875rem',\n    size: '2em',\n    circleFontSize: '1rem',\n    borderRadius: '50%',\n    fontWeight: 500,\n  }\n  return (\n    <Container mt=\"10\" spacing={4}>\n      <Stepper styleConfig={styleConfig} activeStep={step - 1} steps={steps} />\n\n      {questions.filter(isCurrentQuestion).map((question) => {\n        return (\n          <Question\n            key={question.id}\n            question={question}\n            setAnswers={setAnswers}\n            answers={answers}\n          ></Question>\n        )\n      })}\n      <Flex justify=\"space-between\" mt=\"5\">\n        <Button colorScheme=\"gray\" onClick={back} isDisabled={!canBack()}>\n          前へ\n        </Button>\n        <Button colorScheme=\"blue\" onClick={next} isDisabled={!canNext()}>\n          次へ\n        </Button>\n      </Flex>\n      {maxStep === step && (\n        <Center mt=\"5\">\n          <Button\n            isLoading={loading}\n            loadingText=\"判定中\"\n            colorScheme=\"teal\"\n            size=\"lg\"\n            onClick={submit}\n            spinnerPlacement=\"start\"\n          >\n            判定する\n          </Button>\n        </Center>\n      )}\n    </Container>\n  )\n}\n\nexport default Check\n","import { Box, Center, Container } from '@chakra-ui/react'\nimport { VFC } from 'react'\nimport { Button } from '@chakra-ui/react'\nimport { useHistory } from 'react-router'\nconst Home: VFC = () => {\n  const history = useHistory()\n\n  const handleClick = () => {\n    history.push('/check')\n  }\n  return (\n    <Container>\n      <Box color=\"blue.700\" mt=\"4\">\n        Personality Checkでは10の質問からあなたの性格を診断します。\n        あまり考えずに5段階評価で答えてください。\n      </Box>\n      <Box color=\"blue.700\" mt=\"4\">\n        質問の終了後診断結果が表示されます。\n        それでは下のスタートボタンをクリックして始めてください。\n      </Box>\n      <Center mt=\"5\">\n        <Button colorScheme=\"blue\" onClick={handleClick}>\n          Start\n        </Button>\n      </Center>\n    </Container>\n  )\n}\n\nexport default Home\n","import personalityType from 'types/personality_type'\nconst personalityTypes: {\n  [key: string]: personalityType\n} = {\n  optimist: {\n    name: '楽天家',\n    description:\n      'あなたの持つ特性の中で楽天的な性格は特に顕著なようです。\\nこのタイプの方は少し困難にぶつかったくらいではへこたれません。\\n\\nそもそもあまり困難と認識せずに持ち前の特性で乗り切っていくことでしょう。',\n    color: 'teal.500',\n  },\n  rationalist: {\n    name: '合理主義者',\n    description:\n      'あなたの持つ特性の中で合理的な性格は特に顕著なようです。\\n理不尽さや非効率を嫌い、合理的に考え行動します。\\n\\n得をすることも多いですが、全てを合理的に考えてしまい逆に悩んだりすることもあるでしょう。',\n    color: 'blue.500',\n  },\n  patient: {\n    name: '忍耐者',\n    description:\n      'あなたの持つ特性の中で忍耐強さは特に顕著なようです。\\nこのタイプの方は自分の目標に対して辛抱強く努力することができます。\\n\\n直ぐに芽が出ないこともありますが、大器晩成タイプと言えるでしょう。',\n    color: 'red.500',\n  },\n  dreamer: {\n    name: '夢追い人',\n    description:\n      'あなたの持つ特性の中で大きな野望を抱く特性は特に顕著なようです。\\n他の人には理解されないことでも自分の信念に従って行動し、時には大きな成果を掴むことでしょう。',\n    color: 'yellow.500',\n  },\n  cautious: {\n    name: '慎重者',\n    description:\n      'あなたの持つ特性の中で慎重な性格は特に顕著なようです。\\nリスクを天秤にかけ分の悪い賭けはしないタイプです。\\n\\nその慎重さは身を守ることも多いですが、時にはチャンスを逃してしまうこともあるかもしれません。',\n    color: 'green.500',\n  },\n}\n\nexport default personalityTypes\n","import { Button, Center, Container } from '@chakra-ui/react'\nimport { useEffect } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport personalityTypes from 'data/personality_types'\nimport './Result.scss'\n\nconst Result = (props: any) => {\n  const history = useHistory()\n  useEffect(() => {\n    if (props.location.state === undefined) {\n      history.push('/')\n    }\n  }, [props, history])\n\n  let result = {\n    name: '',\n    description: '',\n  }\n  if (props.location !== undefined) {\n    result = personalityTypes[props.location.state.type]\n  }\n\n  const handleClick = () => {\n    history.push('/')\n  }\n  return (\n    <Container>\n      <Center mt=\"5\" fontSize=\"xl\" fontWeight=\"bold\" color=\"teal.500\">\n        あなたの特性: {result.name}\n      </Center>\n      <Center mt=\"3\" className=\"white-space\">\n        {result.description}\n      </Center>\n      <Center mt=\"3\">\n        <Button onClick={handleClick} colorScheme=\"teal\">\n          トップに戻る\n        </Button>\n      </Center>\n    </Container>\n  )\n}\n\nexport default Result\n","import { Flex, Box } from '@chakra-ui/react'\nimport { Link } from 'react-router-dom'\nconst Header = () => {\n  return (\n    <Flex bg=\"green.300\" justify=\"space-between\">\n      <Box color=\"white\" fontWeight=\"bold\" fontSize=\"lg\" p=\"4\">\n        <Link to=\"/\">Personality Check</Link>\n      </Box>\n      <Flex justify=\"flex-end\">\n        <Box p=\"4\" fontWeight=\"bold\" color=\"white\">\n          <Link to=\"/check\">Check</Link>\n        </Box>\n      </Flex>\n    </Flex>\n  )\n}\n\nexport default Header\n","import { Box, Center } from '@chakra-ui/react'\nimport './Footer.scss'\n\nconst Footer = () => {\n  return (\n    <Center className=\"footer\">\n      <Box bg=\"gray\" p=\"3\" color=\"white\" mt=\"4\" w=\"100%\">\n        ©︎{new Date().getFullYear()} Personality Check All rights reserved.\n      </Box>\n    </Center>\n  )\n}\n\nexport default Footer\n","// import React from 'react'\n// import logo from './logo.svg'\nimport './App.css'\nimport { ChakraProvider } from '@chakra-ui/react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport Check from 'views/pages/check/Check'\nimport Home from 'views/pages/home/Home'\nimport Result from 'views/pages/result/Result'\nimport Header from 'views/components/layout/Header'\nimport Footer from 'views/components/layout/Footer'\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <div className=\"page-container\">\n        <Router basename={process.env.PUBLIC_URL}>\n          <Header />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/check\" component={Check} />\n          <Route path=\"/result\" component={Result} />\n          <Footer />\n        </Router>\n      </div>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}